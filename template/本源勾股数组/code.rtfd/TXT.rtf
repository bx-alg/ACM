{\rtf1\ansi\ansicpg936\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red193\green193\blue193;}
{\*\expandedcolortbl;;\cssrgb\c80000\c80000\c80000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 {{\NeXTGraphic Pasted Graphic.png \width14500 \height5240 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
// \uc0\u29983 \u25104 \u26412 \u28304 \u21246 \u32929 \u25968 \u32452 \
vector<tuple<int, int, int>> generatePrimitiveTriples(int limit)\
\{\
    vector<tuple<int, int, int>> triples;\
\
    for (int m = 2; m * m <= limit; ++m)\
    \{\
        for (int n = 1; n < m; ++n)\
        \{\
            // \uc0\u26816 \u26597  m \u21644  n \u26159 \u21542 \u20114 \u36136 \u65292 \u19988 \u19968 \u22855 \u19968 \u20598 \
            if (gcd(m, n) == 1 && (m % 2 != n % 2))\
            \{\
                int a = m * m - n * n;\
                int b = 2 * m * n;\
                int c = m * m + n * n;\
\
                // \uc0\u30830 \u20445  c \u19981 \u36229 \u36807 \u38480 \u21046 \
                if (c <= limit)\
                \{\
                    // \uc0\u30830 \u20445  a < b\
                    if (a > b)\
                        swap(a, b);\
                    triples.push_back(make_tuple(a, b, c));\
                \}\
                else\
                    break;\
            \}\
        \}\
    \}\
    return triples;\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \expnd0\expndtw0\kerning0
\
}